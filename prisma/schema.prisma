// prisma/schema.prisma

// 1. Tell Prisma what database we use and where to connect.
//    The connection string will come from your .env (DATABASE_URL).
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Role enum for RBAC.
//    We're locking Milestone 1 to ADMIN | TEACHER | STUDENT.
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// 3. Organization model.
//    Example: "Berkeley Math Circle".
model Organization {
  id        String  @id @default(uuid())
  name      String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
}

// 4. User model.
//    Every user belongs to EXACTLY ONE org.
//    createdByUserId lets us track who invited/created them
//    (admin creates teacher/student, etc.).
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  hashedPassword    String
  firstName         String
  lastName          String
  role              Role

  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdByUserId   String?      // nullable: first bootstrap admin is self-created
  createdByUser     User?        @relation("UserCreatedUsers", fields: [createdByUserId], references: [id])
  createdUsers      User[]       @relation("UserCreatedUsers")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // For future NextAuth session lookup convenience
  sessions          Session[]
}

// 5. Session model.
//    We'll hook NextAuth into this later.
//    For now: just create it so the table exists and Prisma is ready.
//    Weâ€™ll keep it minimal but compatible with the "database sessions" pattern.
model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @unique
  expires      DateTime

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
